import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import math

c = 3E8  # m/s
f = 27E9  # Hz
lam = c/f  # wavelength
k_0 = 2*np.pi/lam  # wavenumber
planar_periodicity = 5E-3 # m
N = 25  # Number of elements

print("k_0", k_0)

FIRST_SLOT_CENTER = 2E-3

def leakage_retriever(periodicity):

    dy = [4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3,
          6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8]

    min = math.inf
    min_index = 0

    for i in range(0, len(dy)):

        diff = abs(dy[i] - periodicity)

        if diff < min:
            min = diff
            min_index = i


    alpha_over_knaught = [0.005761349, 0.01544223, 0.015484701, 0.010806276, 0.007795475, 0.007155208, 0.008200802,
                          0.008052201, 0.007402886, 0.007323576, 0.006912635, 0.005923797, 0.005828093, 0.004921677,
                          0.00461025, 0.004803124, 0.004001749, 0.004398749, 0.004491214, 0.004298364, 0.004161314,
                          0.003968462, 0.003498085, 0.00382274, 0.005282073, 0.001290923, 0.000971322, 0.000932831,
                          0.001234667, 0.00174391, 0.001974021, 0.002315732, 0.002357862, 0.002188281, 0.002477857,
                          0.002738564, 0.002426412, 0.002562889, 0.002479492, 0.002436988]

    return k_0 * alpha_over_knaught[min_index]

def phase_retriever(periodicity):

    dy = [4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6, 6.1, 6.2, 6.3,
          6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8]

    min = math.inf
    min_index = 0

    for i in range(0, len(dy)):

        diff = abs(dy[i] - periodicity)

        if diff < min:
            min = diff
            min_index = i


    beta_over_knaught = [-0.958819735,-0.917060074,-0.882947593,-0.833885822,-0.777145961,-0.725374371,-0.669130606,
                         -0.622514637,-0.580702956,-0.529919264,-0.49242356,-0.4539905,-0.414693243,-0.382683432,
                         -0.342020143,-0.3007058,-0.275637356,-0.233445364,-0.199367934,-0.173648178,-0.139173101,
                         -0.113203214,-0.087155743,-0.06104854,-0.017452406,-0.008726535,-0.008726535,0,0.043619387,
                         0.069756474,0.095845753,0.121869343,0.139173101,0.156434465,0.182235525,0.199367934,
                         0.216439614,0.233445364,0.250380004,0.267238376]


    return k_0 * beta_over_knaught[min_index]

def parse_extracted_antenna_parameters(filename):
    file = filename
    df = pd.read_excel(file, usecols='B,C,E,H')

    print(df)

    # Distance array
    d = []

    for i in range(0, len(df) - 1):

        d.append((df.iloc[i][0], df.iloc[i][1], df.iloc[i][3], df.iloc[i][6]))

    return d

def read_hfss(filename):
    """
    Read the directivity file exported by hfss
    :param filename: The filename to read as a .csv file. There are FOUR EXPECTED COLUMNS (frequency, theta, phi, directivity)
    :return:
    """

    # Open the filename
    f = open(filename)

    # Store the outputs
    arr0 = {}
    arr1 = {}
    arr2 = {}
    arr3 = {}

    name0 = "no name"
    name1 = "no name"
    name2 = "no name"
    name3 = "no name"

    count = 0

    # Iterate through the content of the file
    for line in f:

        content = line.split(",")

        # Debugging to see the data
        # print(content)

        if count == 0:

            # Record the names of the data series
            name0 = content[0]
            name1 = content[1]
            name2 = content[2]
            name3 = content[3]

            arr0[name0] = []
            arr1[name1] = []
            arr2[name2] = []
            arr3[name3] = []

        else:

            # Append the
            arr0[name0].append(content[0])
            arr1[name1].append(content[1])
            arr2[name2].append(float(content[2]))
            arr3[name3].append(float(content[3]))

        count += 1

    #print(arr3)

    return arr0, arr1, arr2, arr3

def plot_hfss(x, y, filename):
    """
    Plot two x and y variables against each other
    :param x:
    :param y:
    :return:
    """

    name = "HFSS"

    plt.plot(x, y, label=name, color='red', linewidth=1)
    plt.xlim([-90, 90])
    plt.legend()
    plt.xlabel("Theta (\N{DEGREE SIGN})", fontsize=14)
    plt.ylabel("Normalized Radiation Pattern (dB)", fontsize=14)
    plt.grid()

def create_legend_name(filename):
    """
    Create the name of the legend for the current file
    :param filename:
    :return:
    """

    content = filename.split("\\")

    print(content)

    last = content[len(content)-1].split(".")[0]

    print(last)

    name = ""

    item_counter = 0
    for item in last.split("_"):

        if item_counter != 0:
            name += "-" + item
        else:
            name += item

        item_counter += 1

    return name

def compute_planar_af(theta, dy, pointing_angle):
    """
    Compute the array factor of the spline
    :return:
    """

    AF = []
    theta_naught = (pointing_angle) * np.pi / 180

    for angle in theta:

        AF_cur = 0

        angle = angle * np.pi/180

        # Sum each of the elements
        for n in range(1, N):

            # Excitation information
            alpha = 0
            I_0 = 1

            d = (n-1) * dy + FIRST_SLOT_CENTER # Location of the slot
            beta = k_0 * np.sin(theta_naught) # phase difference due to slot location
            I_n = np.exp(-alpha*d) # Excitation for specific element

            # Full element factor
            AF_cur += I_n * (np.exp(1j * k_0 * d * np.sin(angle))) * np.exp(-1j*d*beta)

        AF.append(AF_cur)

    return AF

def compute_spline_af(theta, R, desired_angle):
    """
    Compute the array factor of the spline
    :return:
    """

    AF = []

    # Loop through all the angles we want to calculate the array factor at
    for angle in theta:

        AF_cur = 0

        # Convert the angle to radians
        angle = angle * np.pi / 180

        #print("XXXX Angle XXXX", angle)

        # Sum each of the elements for a specific angle
        for y, z, p, normal_vector_angle in R:

            #print("y, z : ", y, z)
            #print(y)
            if p > 4.3:

                # Playing parameters
                alpha = 0#leakage_retriever(p)
                I_0 = 1 # equal excitation

                # Convert y and z to mm
                y = y * (10**-3)
                z = z * (10**-3)
                p = p * (10**-3)

                #print(p)

                theta_naught = desired_angle * np.pi / 180
                # The dot product of hat(r) and vec(r)_i
                d = np.sin(angle)*y + np.cos(angle)*z
                d2 = np.sin(theta_naught)*y + np.cos(theta_naught)*z
                #r = 1
                #R_n = np.sqrt((r*np.sin(angle) - y*np.sin(angle))**2 + (r*np.cos(angle) - z*np.cos(angle))**2)
                #d = d * R_n
                #print(d)

                # Beta
                #beta = - k_0 * d * np.sin(theta_naught)
                #print("beta, k_0", beta, k)
                # Gamma
                #gamma = 1j * alpha + beta

                # The excitation
                I_n = np.exp(-alpha*d)

                # The final array factor for a specific angle
                AF_cur += I_n*np.exp(1j * k_0 * d) * np.exp(-1j * k_0* d2)


        AF.append(AF_cur)

    return AF

def retrieve_element_pattern(filename):
    """
    Retrieve the element pattern from an HFSS simulation
    :param filename:
    :return:
    """
    pass

def compute_antenna_pattern(array_factor, element_pattern):

    print("Element Pattern len is : ", len(element_pattern))

    antenna_pattern = []

    for i in range(0, len(element_pattern)):
        antenna_pattern.append(array_factor[i] * element_pattern[i])

    return antenna_pattern

#simulation_filename_planar = "R:\\My Results\\Fall 2023\\Leaky-project\\Simulations\\array_theory_planar\\active\\planar-extended.csv"
simulation_filename_planar = "R:\\New HFSS\\HFSS 2023\\planar-lwa-2023\\exports\\planar-lwa-for-af-comparison_normallized.csv"

# Leaky-spline-7 (slots are not infinite in width)
#simulation_filename_spline = "R:\\New HFSS\\HFSS 2023\\Spline-antenna\\exports\\leaky_spline_7\\normalized_directivity_025_deg.csv"

# Spline fab
#simulation_filename_spline = "R:\\New HFSS\\HFSS 2024\\spine_lwa_2024\\exports\\normalized_directivity_minus_125_deg.csv"

# Spline, h = 3.0, er = 2.87, pec covering slow-wave slots
simulation_filename_spline = "R:\\New HFSS\\HFSS 2024\\spine_lwa_2024\\exports\\radiation_pattern_h_30_er_287.csv"

# Spline, h = 2.0, er = 2.87, pec covering slow-wave slots
simulation_filename_spline_slow = "R:\\New HFSS\\HFSS 2024\\spine_lwa_2024\\exports\\curve-fit-13-slow-wave-directivity.csv"
simulation_filename_spline_pec = "R:\\New HFSS\\HFSS 2024\\spine_lwa_2024\\exports\\curve-fit-13-pec-directivity.csv"

# Array theory graphing
SOURCE_DIR = "R:\\My Results\\Fall 2023\\Leaky-project\\Simulations\\array_theory_planar\\simulated directivity.csv"
OUTPUT_DIR = "R:\\Code Repository\\EM_grapher\\output\\spline_leaky_15_deg"

# Definition for theta
theta = np.linspace(-90, 90, 721)

# Element patterns
# Element pattern for ABS er = 3.05, h = 2.5, slot length = 10mm
#element_pattern = [0.091589903,0.092426785,0.093270225,0.094120282,0.094977014,0.095840481,0.096710742,0.097587857,0.098471886,0.099362891,0.100260932,0.101166069,0.102078366,0.102997882,0.103924681,0.104858825,0.105800377,0.106749399,0.107705954,0.108670106,0.10964192,0.110621457,0.111608784,0.112603963,0.11360706,0.114618139,0.115637265,0.116664504,0.11769992,0.118743579,0.119795546,0.120855888,0.12192467,0.123001958,0.124087817,0.125182315,0.126285517,0.12739749,0.128518299,0.129648012,0.130786694,0.131934412,0.133091232,0.134257221,0.135432445,0.136616971,0.137810864,0.13901419,0.140227016,0.141449408,0.142681432,0.143923152,0.145174636,0.146435947,0.147707152,0.148988315,0.150279502,0.151580776,0.152892202,0.154213843,0.155545765,0.156888029,0.1582407,0.159603839,0.160977509,0.162361772,0.16375669,0.165162324,0.166578734,0.16800598,0.169444123,0.170893221,0.172353332,0.173824516,0.175306829,0.176800329,0.178305071,0.17982117,0.18134863,0.182887505,0.184437851,0.18599972,0.187573165,0.189158238,0.190754991,0.192363473,0.193983734,0.195615822,0.197259787,0.198915673,0.200583527,0.202263395,0.203955319,0.205659344,0.20737551,0.209103859,0.21084443,0.212597262,0.214362392,0.216139858,0.217929692,0.219731931,0.221546606,0.223373748,0.225213388,0.227065555,0.228930274,0.230807574,0.232697477,0.234600007,0.236515185,0.238443032,0.240383566,0.242336804,0.244302761,0.246281451,0.248272886,0.250277076,0.252294031,0.254323755,0.256366256,0.258421536,0.260489597,0.262570438,0.264664058,0.266770451,0.268889612,0.271021532,0.273166202,0.275323609,0.27749374,0.279676577,0.281872103,0.284080296,0.286301134,0.288534592,0.290780644,0.293039258,0.295310404,0.297594047,0.299890152,0.302198678,0.304519586,0.306852831,0.309198367,0.311556146,0.313926117,0.316308226,0.318702417,0.32110863,0.323526806,0.32595688,0.328398785,0.330852451,0.333317808,0.33579478,0.33828329,0.340783258,0.3432946,0.345817231,0.348351062,0.350896002,0.353451957,0.356018828,0.358596517,0.36118492,0.363783862,0.366393293,0.369013104,0.371643179,0.374283398,0.376933639,0.379593778,0.382263687,0.384943234,0.387632284,0.390330702,0.393038345,0.395755071,0.398480733,0.401215181,0.403958261,0.406709818,0.409469692,0.412237721,0.415013739,0.417797577,0.420589063,0.423388023,0.426194277,0.429007645,0.431827941,0.434654978,0.437488565,0.440328508,0.443174609,0.446026669,0.448884483,0.451747846,0.454616547,0.457490374,0.460369111,0.463252539,0.466140436,0.469032577,0.471928734,0.474828677,0.47773217,0.480638979,0.483548862,0.486461576,0.489376877,0.492294516,0.495214242,0.4981358,0.501058934,0.503983384,0.506908888,0.509835181,0.512761996,0.515689061,0.518616105,0.521542852,0.524469024,0.527394207,0.53031823,0.533240811,0.53616166,0.539080484,0.541996989,0.544910877,0.547821848,0.550729602,0.553633834,0.556534239,0.559430509,0.562322334,0.565209403,0.568091401,0.570968015,0.573838926,0.576703816,0.579562365,0.582414251,0.58525915,0.588096738,0.590926689,0.593748674,0.596562367,0.599367435,0.60216355,0.604950378,0.607727587,0.610494844,0.613251812,0.615998158,0.618733545,0.621457637,0.624170096,0.626870585,0.629558766,0.632234301,0.634896851,0.637546078,0.640181644,0.64280321,0.645410437,0.648002988,0.650580524,0.653142707,0.655689202,0.65821967,0.660733777,0.663230985,0.665711106,0.668173858,0.670618903,0.673045902,0.675454518,0.677844414,0.680215255,0.682566707,0.684898436,0.687210113,0.689501407,0.69177199,0.694021537,0.696249721,0.698456221,0.700640716,0.702802887,0.704942418,0.707058994,0.709152304,0.711222038,0.713267888,0.715289552,0.717286726,0.719259112,0.721206414,0.723128338,0.725024594,0.726894895,0.728738958,0.730556502,0.732347249,0.734110925,0.73584726,0.737555988,0.739236846,0.740889573,0.742513916,0.744109621,0.745676441,0.747214134,0.748722459,0.750201182,0.751650071,0.753068899,0.754457446,0.755815492,0.757142825,0.758439237,0.759704522,0.760938484,0.762140926,0.76331166,0.7644505,0.765557269,0.76663179,0.767673894,0.768683418,0.769660202,0.770604092,0.771514939,0.772392601,0.773236939,0.77404782,0.774825119,0.775568713,0.776278485,0.776954327,0.777596133,0.778203803,0.778777245,0.77931637,0.779821096,0.780291348,0.780727053,0.781128148,0.781494573,0.781826276,0.782123208,0.782385329,0.782612602,0.782804999,0.782962494,0.783085071,0.783172717,0.783225425,0.783243196,0.783223911,0.783168179,0.783077478,0.782951816,0.782791207,0.782595668,0.782365227,0.782099912,0.781799763,0.781464821,0.781095135,0.780690759,0.780251755,0.779778188,0.77927013,0.778727658,0.778150857,0.777539816,0.776894629,0.776215397,0.775502226,0.774755228,0.773974521,0.773160226,0.772312474,0.771431397,0.770517135,0.769569832,0.768589639,0.76757671,0.766531207,0.765453294,0.764343143,0.763200929,0.762026834,0.760821042,0.759583746,0.75831514,0.757015425,0.755684806,0.754323492,0.752931699,0.751509645,0.750057553,0.748575652,0.747064173,0.745523353,0.743953432,0.742354655,0.740727271,0.739071533,0.737387696,0.735676022,0.733936774,0.732170221,0.730376633,0.728556286,0.726709457,0.724836429,0.722937486,0.721012917,0.719063011,0.717088065,0.715088373,0.713064237,0.711015959,0.708943845,0.706848201,0.704729338,0.702587569,0.700423209,0.698236576,0.696027987,0.693797766,0.691546234,0.689273718,0.686980544,0.684667008,0.682333411,0.679980159,0.677607579,0.675215996,0.672805739,0.670377138,0.667930522,0.665466224,0.662984576,0.660485912,0.657970566,0.655438874,0.652891172,0.650327797,0.647749085,0.645155374,0.642547003,0.639924309,0.63728763,0.634637306,0.631973675,0.629297076,0.626607846,0.623906325,0.621192849,0.618467757,0.615731386,0.612984072,0.610226151,0.607457959,0.60467983,0.601892098,0.599095097,0.596289157,0.59347461,0.590651786,0.587821014,0.58498262,0.582136932,0.579284274,0.576424968,0.573559338,0.570687704,0.567810384,0.564927695,0.562039952,0.55914747,0.55625056,0.553349531,0.550444691,0.547536347,0.544624801,0.541710356,0.538793311,0.535873963,0.532952606,0.530029535,0.527105038,0.524179405,0.521252919,0.518325865,0.515398522,0.512471168,0.509544079,0.506617528,0.503691783,0.500767113,0.497843781,0.49492205,0.492002177,0.48908442,0.486169031,0.483256261,0.480346356,0.477439562,0.474536119,0.471636265,0.468740237,0.465848267,0.462960582,0.460077411,0.457198976,0.454325497,0.45145719,0.448594269,0.445736946,0.442885427,0.440039891,0.437200539,0.434367566,0.431541166,0.42872153,0.425908845,0.423103297,0.420305066,0.41751433,0.414731266,0.411956043,0.409188831,0.406429795,0.403679097,0.400936896,0.398203349,0.395478606,0.392762819,0.390056133,0.387358692,0.384670634,0.381992098,0.379323218,0.376664122,0.374014941,0.371375796,0.368746811,0.366128104,0.363519789,0.36092198,0.358334785,0.355758311,0.35319266,0.350637935,0.348094231,0.345561644,0.343040265,0.340530183,0.338031483,0.33554425,0.333068563,0.3306045,0.328152135,0.32571154,0.323282786,0.320865937,0.318461059,0.316068212,0.313687456,0.311318845,0.308962435,0.306618274,0.304286413,0.301966897,0.299659769,0.297365071,0.29508284,0.292813114,0.290555927,0.288311311,0.286079295,0.283859906,0.281653169,0.279459106,0.277277738,0.275109084,0.272953158,0.270809976,0.268679548,0.266561886,0.264456996,0.262364885,0.260285557,0.258219013,0.256165254,0.254124279,0.252096083,0.250080661,0.248078006,0.24608811,0.244110961,0.242146548,0.240194856,0.23825587,0.236329574,0.234415947,0.23251497,0.230626622,0.228750879,0.226887716,0.225037107,0.223199025,0.221373441,0.219560324,0.217759644,0.215971367,0.21419546,0.212431886,0.210680611,0.208941595,0.207214801,0.205500188,0.203797715,0.202107341,0.200429022,0.198762714,0.197108372,0.19546595,0.193835401,0.192216677,0.190609729,0.189014508,0.187430963,0.185859044,0.184298696,0.18274987,0.181212509,0.179686561,0.178171971,0.176668682,0.175176638,0.173695784,0.17222606,0.17076741,0.169319774,0.167883094,0.166457309,0.16504236,0.163638186,0.162244726,0.160861918,0.159489701,0.158128012,0.156776788,0.155435968,0.154105486,0.15278528,0.151475286,0.150175439,0.148885675,0.147605929,0.146336136,0.145076231,0.143826149,0.142585824,0.141355191,0.140134183,0.138922735,0.13772078,0.136528252,0.135345086,0.134171215,0.133006572,0.131851091,0.130704705,0.129567349,0.128438955,0.127319458,0.126208791,0.125106887,0.124013681,0.122929105,0.121853094,0.120785583,0.119726504,0.118675792,0.117633381,0.116599206,0.115573202,0.114555302,0.113545443,0.112543558,0.111549583,0.110563455,0.109585107,0.108614477,0.1076515,0.106696113,0.105748251,0.104807853,0.103874855,0.102949195,0.102030809,0.101119636,0.100215615,0.099318683,0.09842878,0.097545844,0.096669815,0.095800633,0.094938237,0.094082569,0.093233568,0.092391176,0.091555335]

# Element pattern for ABS er = 3.05, h = 3.0, slot_length = 30mm
element_pattern = [0.023759982,0.023979725,0.024201194,0.024424402,0.024649367,0.024876103,0.025104626,0.025334951,0.025567095,0.025801073,0.026036901,0.026274595,0.026514172,0.026755647,0.026999037,0.027244357,0.027491625,0.027740857,0.02799207,0.028245279,0.028500502,0.028757755,0.029017056,0.02927842,0.029541866,0.029807409,0.030075068,0.030344858,0.030616797,0.030890902,0.03116719,0.031445679,0.031726386,0.032009327,0.032294521,0.032581985,0.032871735,0.033163789,0.033458165,0.03375488,0.034053951,0.034355396,0.034659231,0.034965475,0.035274145,0.035585258,0.035898831,0.036214882,0.036533427,0.036854485,0.037178072,0.037504205,0.037832902,0.038164179,0.038498054,0.038834544,0.039173665,0.039515434,0.039859868,0.040206984,0.040556798,0.040909327,0.041264586,0.041622593,0.041983364,0.042346914,0.04271326,0.043082417,0.0434544,0.043829227,0.044206911,0.044587469,0.044970915,0.045357264,0.045746532,0.046138732,0.046533879,0.046932031,0.047333165,0.047737294,0.048144432,0.048554595,0.048967794,0.049384045,0.049803359,0.050225751,0.050651233,0.051079818,0.051511519,0.051946347,0.052384314,0.052825433,0.053269715,0.05371717,0.05416781,0.054621646,0.055078688,0.055538945,0.056002428,0.056469146,0.056939108,0.057412324,0.057888801,0.058368547,0.058851571,0.05933788,0.05982748,0.060320379,0.060816584,0.061316099,0.061818931,0.062325084,0.062834564,0.063347375,0.063863521,0.064383005,0.06490583,0.065431999,0.065961514,0.066494377,0.067030589,0.067570152,0.068113064,0.068659326,0.069208938,0.069761897,0.070318203,0.070877853,0.071440844,0.072007174,0.072576837,0.07314983,0.073726148,0.074305786,0.074888736,0.075474993,0.076064549,0.076657397,0.077253527,0.077852931,0.078455599,0.07906152,0.079670685,0.08028308,0.080898694,0.081517513,0.082139525,0.082764715,0.083393067,0.084024567,0.084659198,0.085296942,0.085937783,0.086581702,0.087228679,0.087878695,0.088531728,0.089187759,0.089846764,0.09050872,0.091173605,0.091841393,0.09251206,0.09318558,0.093861925,0.094541069,0.095223001,0.095907677,0.096595066,0.09728514,0.097977866,0.098673213,0.099371148,0.100071636,0.100774644,0.101480136,0.102188076,0.102898427,0.103611151,0.10432621,0.105043564,0.105763173,0.106484996,0.107208991,0.107935116,0.108663326,0.109393578,0.110125826,0.110860024,0.111596125,0.112334083,0.113073847,0.113815369,0.114558598,0.115303484,0.116049975,0.116798018,0.11754756,0.118298546,0.119050921,0.11980463,0.120559615,0.12131582,0.122073185,0.122831652,0.123591161,0.124351651,0.125113061,0.125875328,0.12663839,0.127402183,0.128166641,0.128931701,0.129697296,0.130463358,0.131229822,0.131996618,0.132763677,0.133530931,0.134298308,0.135065738,0.135833149,0.136600468,0.137367623,0.138134513,0.138901086,0.139667268,0.140432983,0.141198154,0.141962704,0.142726555,0.143489628,0.144251845,0.145013125,0.145773389,0.146532556,0.147290544,0.148047272,0.148802658,0.149556619,0.150309072,0.151059934,0.15180912,0.152556545,0.153302127,0.154045778,0.154787414,0.155526948,0.156264295,0.156999368,0.157732081,0.158462345,0.159190075,0.159915182,0.160637579,0.161357177,0.162073889,0.162787626,0.1634983,0.164205823,0.164910105,0.165611058,0.166308594,0.167002623,0.167693056,0.168379806,0.169062782,0.169741897,0.170417061,0.171088187,0.171755185,0.172417967,0.173076445,0.17373049,0.174380048,0.175025029,0.175665348,0.176300914,0.176931642,0.177557443,0.178178231,0.178793918,0.17940442,0.180009648,0.180609519,0.181203947,0.181792846,0.182376134,0.182953725,0.183525538,0.184091488,0.184651493,0.185205473,0.185753346,0.186295031,0.186830449,0.18735952,0.187882166,0.188398309,0.188907872,0.189410778,0.189906953,0.19039632,0.190878807,0.19135434,0.191822846,0.192284254,0.192738494,0.193185496,0.193625191,0.19405751,0.194482389,0.19489976,0.195309558,0.19571172,0.196106183,0.196492886,0.196871767,0.197242767,0.197605827,0.197960891,0.198307902,0.198646805,0.198977545,0.199300072,0.199614332,0.199920277,0.200217856,0.200507023,0.20078773,0.201059933,0.201323588,0.201578652,0.201825085,0.202062845,0.202291895,0.202512198,0.202723718,0.20292642,0.203120271,0.20330524,0.203481297,0.203648412,0.203806559,0.203955712,0.204095846,0.204226938,0.204348967,0.204461913,0.204565757,0.204660482,0.204746072,0.204822514,0.204889794,0.204947902,0.204996829,0.205036565,0.205067104,0.205088442,0.205100575,0.205103501,0.205097219,0.205081502,0.205056609,0.205022541,0.204979303,0.204926901,0.204865341,0.204794633,0.204714787,0.204625815,0.204527729,0.204420545,0.20430428,0.20417895,0.204044576,0.203901178,0.203748779,0.203587402,0.203417074,0.20323782,0.203049669,0.202852652,0.202646798,0.202432141,0.202208715,0.201976556,0.201735699,0.201486184,0.201228051,0.20096134,0.200686093,0.200402355,0.20011017,0.199809586,0.199500649,0.199183409,0.198857916,0.198524222,0.198182379,0.197832441,0.197474464,0.197108504,0.196734619,0.196352867,0.195963308,0.195566003,0.195161015,0.194748407,0.194328243,0.193900587,0.193465508,0.193023071,0.192573346,0.192116401,0.191652307,0.191181136,0.190702958,0.190217848,0.189725879,0.189227125,0.188721663,0.188209568,0.187690919,0.187165791,0.186634265,0.186096419,0.185552333,0.185002088,0.184445766,0.183883448,0.183315216,0.182741154,0.182161346,0.181575875,0.180984826,0.180388284,0.179786335,0.179179057,0.178566536,0.177948868,0.17732614,0.176698436,0.176065843,0.175428448,0.174786337,0.174139598,0.173488318,0.172832586,0.172172488,0.171508113,0.170839549,0.170166884,0.169490208,0.168809608,0.168125174,0.167436993,0.166745156,0.166049751,0.165350867,0.164648592,0.163943015,0.163234226,0.162522312,0.161807362,0.161089465,0.160368709,0.159645182,0.158918972,0.158190167,0.157458854,0.15672512,0.155989053,0.155250739,0.154510265,0.153767716,0.153023179,0.152276739,0.151528481,0.150778491,0.150026851,0.149273646,0.14851896,0.147762875,0.147005475,0.146246841,0.145487055,0.144726198,0.14396435,0.143201592,0.142438003,0.141673663,0.140908649,0.140143039,0.139376911,0.138610341,0.137843404,0.137076178,0.136308735,0.135541151,0.134773498,0.13400585,0.133238277,0.132470853,0.131703646,0.130936728,0.130170167,0.129404032,0.12863839,0.127873309,0.127108855,0.126345092,0.125582087,0.124819902,0.124058602,0.123298247,0.1225389,0.121780622,0.121023473,0.120267511,0.119512796,0.118759384,0.118007332,0.117256697,0.116507533,0.115759895,0.11501383,0.114269392,0.113526632,0.112785602,0.11204635,0.111308927,0.11057338,0.109839756,0.109108103,0.108378465,0.107650888,0.106925415,0.10620209,0.105480955,0.104762052,0.104045421,0.103331103,0.102619136,0.101909558,0.101202408,0.100497721,0.099795533,0.09909588,0.098398796,0.097704314,0.097012466,0.096323285,0.095636801,0.094953045,0.094272045,0.093593832,0.092918431,0.092245872,0.091576179,0.090909378,0.090245495,0.089584553,0.088926575,0.088271584,0.087619602,0.08697065,0.086324748,0.085681915,0.085042171,0.084405534,0.083772021,0.083141649,0.082514434,0.081890391,0.081269535,0.080651881,0.080037441,0.079426228,0.078818254,0.078213531,0.07761207,0.07701388,0.076418971,0.075827351,0.075239029,0.074654012,0.074072308,0.073493923,0.072918862,0.072347131,0.071778735,0.071213679,0.070651964,0.070093596,0.069538576,0.068986907,0.068438589,0.067893625,0.067352014,0.066813757,0.066278853,0.065747301,0.065219099,0.064694247,0.064172741,0.063654578,0.063139756,0.062628271,0.062120119,0.061615295,0.061113794,0.060615611,0.06012074,0.059629175,0.05914091,0.058655938,0.058174251,0.057695842,0.057220703,0.056748826,0.056280201,0.055814821,0.055352676,0.054893756,0.054438052,0.053985552,0.053536248,0.053090127,0.05264718,0.052207394,0.051770758,0.05133726,0.050906889,0.050479631,0.050055475,0.049634407,0.049216415,0.048801485,0.048389604,0.047980758,0.047574934,0.047172116,0.046772292,0.046375446,0.045981565,0.045590632,0.045202634,0.044817556,0.044435381,0.044056095,0.043679683,0.043306127,0.042935414,0.042567527,0.042202449,0.041840166,0.041480659,0.041123914,0.040769914,0.040418642,0.040070082,0.039724217,0.03938103,0.039040504,0.038702623,0.038367369,0.038034726,0.037704676,0.037377202,0.037052287,0.036729915,0.036410067,0.036092726,0.035777875,0.035465497,0.035155574,0.034848089,0.034543025,0.034240363,0.033940088,0.03364218,0.033346624,0.033053401,0.032762494,0.032473886,0.032187559,0.031903496,0.03162168,0.031342094,0.031064719,0.030789539,0.030516537,0.030245695,0.029976996,0.029710424,0.029445961,0.02918359,0.028923294,0.028665057,0.028408861,0.028154689,0.027902525,0.027652353,0.027404155,0.027157916,0.026913618,0.026671245,0.026430781,0.02619221,0.025955515,0.02572068,0.02548769,0.025256528,0.025027178,0.024799626,0.024573854,0.024349848,0.024127592,0.02390707,0.023688268]

# Element Pattern
plt.grid()
plt.title("Element Pattern")
plt.xlim([-90, 90])
plt.ylim([-20, 0])
plt.xlabel("Theta (\N{DEGREE SIGN})", fontsize=14)
plt.ylabel("Total Realized Gain (dB)", fontsize=14)
plt.plot(theta, 10*np.log10(element_pattern), label="Element Pattern")
plt.savefig("R:\\Code Repository\\spline_lwa_project\\output\\element-pattern", dpi=450)
plt.legend()
plt.clf()

# Planar LWA (HFSS)
frequency, phi, theta_hfss, normalized_directivity = read_hfss(simulation_filename_planar)

#print(theta)
print(theta_hfss.keys())

# Planar LWA (HFSS)
x = theta_hfss['Theta [deg]']
y = normalized_directivity['dB10normalize(DirTotal) []\n']
plot_hfss(x, y, simulation_filename_planar)

print(theta)

# Planar LWA (Array Factor)
AF = compute_planar_af(theta, planar_periodicity, -38)

plt.plot(theta, 10*np.log((np.abs(AF)**2)/np.max(np.abs(AF)**2)), label="Array Factor", color="blue", linestyle="dashed")
plt.title("Planar LWA Normalized Radiation Pattern")

# Planar LWA (Array Pattern)
antenna_pattern = compute_antenna_pattern(AF, element_pattern) # Retrieve the antenna pattern
plt.plot(theta, 10*np.log10((np.abs(antenna_pattern)**2)/np.max(np.abs(antenna_pattern)**2)), label="Array Pattern", color="green")

plt.legend()
plt.ylim([-50, 0])
plt.savefig("R:\\Code Repository\\spline_lwa_project\\output\\planar-array-factor", dpi=450)
plt.show()
plt.clf()

# Spline CLWA (HFSS)
FILENAME = "output/extracted_antenna_parameters.xlsx"
frequency, phi, theta, normalized_directivity = read_hfss(simulation_filename_spline_slow)
x = theta['"Theta [deg]"']
y = normalized_directivity['"dB10normalize(DirTotal) []"\n']
plot_hfss(x, y, simulation_filename_spline)

frequency, phi, theta, normalized_directivity = read_hfss(simulation_filename_spline_slow)

theta = np.linspace(-90, 90, 721)

# Spline CLWA (Array Factor)
R = parse_extracted_antenna_parameters(FILENAME)
AF = compute_spline_af(theta, R, 2)
plt.plot(theta, 10*np.log10((np.abs(AF)**2)/np.max(np.abs(AF)**2)), label="Array Factor", color="blue", linestyle="dashed")
plt.xlim([-90, 90])
plt.ylim([-50, 0])
plt.title("Spline CLWA Normalized Radiation Pattern")

# Spline CLWA (Antenna Pattern)
antenna_pattern = compute_antenna_pattern(AF, element_pattern) # Retrieve the antenna pattern
plt.plot(theta, 10*np.log10((np.abs(antenna_pattern)**2)/np.max(np.abs(antenna_pattern)**2)), label="Array Pattern", color="green")
plt.legend()
plt.savefig("R:\\Code Repository\\spline_lwa_project\\output\\spline-array-factor", dpi=450)
plt.show()
